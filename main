#include <iostream>
#include <cstring>
#include <cassert>
#include <fstream>
#include "Package.h"

using namespace std;

#define DEBUG 2
#define incorrectNum1 1000000000
#define incorrectNum2 -100
#define correctNum1 10
#define correctNum2 99
#define correctNum3 50
#define correctNum4 75
#define correctNum5 6843
#define correctNum6 3
#define correctNum7 5
#define correctNum8 863
#define bigNum 10000000
#define one 1
#define correctName1 "box"
#define correctName2 "fridge"
#define correctName3 "package"
#define correctName4 "What"
#define correctName5 "orange"
#define correctName6 "small"
#define incorrectName "aaaaaaaaaaaar"

#include "List.h"
void printList(List list, const bool how) {
    if(list.GetLen()==0) return;
    List::Node *start;
    if (how) start = list.Head();
    else start = list.Tail();
    if (start->prev() == 0) {
        if (start != 0) {
            List::Node *temp = start;
            int i = 1;
            while (temp->ifNext()) {
                cout << "num " << i << ": " ;
                temp->getPack().Print();
                cout<<", value " << temp->getPack().getValue()<< endl;
                temp = temp->next();
                i++;
            }
            cout << "num " << i << ": ";
            temp->getPack().Print();
            cout<<", value " << temp->getPack().getValue()<< endl;
        }
    } else {
        if (start != 0) {
            List::Node *temp = start;
            int i = list.GetLen();
            while (temp->ifPrev()) {
                cout << "num " << i << ": " ;
                temp->getPack().Print();
                cout<<", value " << temp->getPack().getValue()<< endl;
                temp = temp->prev();
                i--;
            }
            cout << "num " << i << ": " ;
            temp->getPack().Print();
            cout<<", value " << temp->getPack().getValue()<< endl;
        }
    }
}

bool compare(const List& list1, const List& list2) {
    List::Node *firstOne = list1.Head();
    List::Node *firstSec = list2.Head();
    if (firstOne != 0 && firstSec != 0 && !firstOne->ifPrev() && !firstSec->ifPrev() &&
        list1.GetLen() == list2.GetLen()) {
        List::Node *temp = firstOne;
        List::Node *temp2 = firstSec;
        while (temp->ifNext() != 0 && temp2->ifNext() != 0) {
            assert(temp->getPack().getValue() == temp2->getPack().getValue());
            assert(temp->getPack().getSize() == temp2->getPack().getSize());
            assert(temp->getPack().getPrice() == temp2->getPack().getPrice());
            assert(!strcmp(temp->getPack().getName(), temp2->getPack().getName()));
            temp = temp->next();
            temp2 = temp2->next();
        }
        assert(temp->getPack().getValue() == temp2->getPack().getValue());
        assert(temp->getPack().getSize() == temp2->getPack().getSize());
        assert(temp->getPack().getPrice() == temp2->getPack().getPrice());
        assert(!strcmp(temp->getPack().getName(), temp2->getPack().getName()));
        return 1;
    } else return 0;
}

int main() {
#if DEBUG == 1
    //тест стандартного консруктора и методов получения параметров класса Package

    Package test=Package(correctName1, incorrectNum1,correctNum1);
    assert(test.getSize()==0);
    assert(!strcmp(test.getName(),correctName1));
    assert(test.getPrice()==correctNum1);
    test.setInfo(correctName2, correctNum2, incorrectNum2);
    assert(test.getSize()==correctNum2);
    assert(!strcmp(test.getName(),correctName2));
    assert(test.getPrice()==0);
    //методы изменения параметров
    test.setSize(correctNum3);
    assert(test.getSize()==correctNum3);
    test.setPrice(correctNum4);
    assert(test.getPrice()==correctNum4);
    //конструктор копирования
    Package test2=Package(test);
    assert(test.getSize()==test2.getSize());
    assert(!strcmp(test.getName(),test2.getName()));
    assert(test.getPrice()==test2.getPrice());
    //конструктор по умолчанию
    Package test3=Package();
    assert(test3.getSize()==0);
    assert(!strcmp(test3.getName(),""));
    assert(test3.getPrice()==0);
    test3.setName(incorrectName);
    assert(!strcmp(test3.getName(),""));
#endif
#if DEBUG == 2
    //Конструктор по умолчанию
    List list1 = List();
    int *a = new int;
    *a = list1.GetLen();
    Package temp = Package(correctName1, correctNum1, correctNum4);
    //Проверка методов вставки
    list1.InsertWSort(temp);
    Package test=list1.Tail()->getPack();
    temp.setInfo(correctName2, correctNum4, correctNum3);
    list1.Insert(temp);
    assert(list1.Tail()->getPack().getValue()!=test.getValue());
    temp.setInfo(correctName3, 1000000, 1);
    test=list1.GetElem(list1.GetLen()-1)->getPack();
    list1.InsertBetween(temp, list1.GetLen() - 1, list1.GetLen());
    assert(list1.GetElem(list1.GetLen()-1)->getPack().getValue()!=test.getValue());
    temp.setInfo(correctName4, correctNum7, correctNum8);
    test=list1.Head()->getPack();
    list1.InsertBetween(temp,0,1);
    assert(list1.Head()->getPack().getValue()!=test.getValue());
    temp.setInfo(correctName5, correctNum5, correctNum6);
    test=list1.GetElem(3)->getPack();
    list1.InsertBetween(temp, 2, 3);
    assert(list1.GetElem(3)->getPack().getValue()!=test.getValue());
    temp.setInfo(incorrectName, incorrectNum1, incorrectNum2);
    //этой вставки не должно произойти, неверное имя у temp
    list1.InsertBetween(temp, 4, 5);
    assert(*a + 5 == list1.GetLen());
    //конструктор копирования
    List list2 = List(list1);
    assert(compare(list1, list2));
    *a = list2.GetLen();
    //проверка частичного удаления
    list2.Del(1);
    assert(*a - 1 == list2.GetLen());
    assert(!compare(list1, list2));
    //полное удаление элементов в списке
    list2.Destruction();
    assert(list2.GetLen() == 0);
    //запись и считывание из файла
    list1.ToFile("toFrom.txt");
    list2.FromFile("toFrom.txt");
    assert(compare(list1, list2));
    delete a;
    list2.Destruction();
    //Проверка сортировки и вывода списка
    assert(!list1.IfSorted());
    list1.Sort();
    printList(list1, 1);
    cout<<endl;
    printList(list1, 0);
    assert(list1.IfSorted());
    //Проверка вставки с сортировкой
    temp.setInfo(correctName6, correctNum8, correctNum2);
    list1.InsertWSort(temp);
    assert(list1.IfSorted());
#endif
}
